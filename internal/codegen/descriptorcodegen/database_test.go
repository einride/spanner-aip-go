package descriptorcodegen

import (
	"io/ioutil"
	"os/exec"
	"path/filepath"
	"testing"

	"cloud.google.com/go/spanner/spansql"
	"go.einride.tech/aip-spanner/internal/codegen"
	"go.einride.tech/aip-spanner/spanddl"
	"gotest.tools/v3/assert"
	"gotest.tools/v3/golden"
)

// nolint: paralleltest // false positive
func TestGenerateDatabaseDescriptor(t *testing.T) {
	t.Parallel()
	testdataFiles, err := filepath.Glob("testdata/*.sql")
	assert.NilError(t, err)
	for _, testdataFile := range testdataFiles {
		testdataFile := testdataFile
		t.Run(testdataFile, func(t *testing.T) {
			t.Parallel()
			testdata, err := ioutil.ReadFile(testdataFile)
			assert.NilError(t, err)
			ddl, err := spansql.ParseDDL(testdataFile, string(testdata))
			assert.NilError(t, err)
			var db spanddl.Database
			assert.NilError(t, db.ApplyDDL(ddl))
			f := codegen.NewFile(testdataFile)
			buildTag := "testdata" + filepath.Base(testdataFile)
			f.P("// +build ", buildTag)
			f.P()
			f.P("package testdata")
			f.P()
			f.P("// Code generated by ", t.Name(), ". DO NOT EDIT.")
			GenerateDatabaseDescriptor(f, &db)
			actual, err := f.Content()
			assert.NilError(t, err)
			goldenFile := testdataFile + ".golden.go"
			golden.Assert(t, string(actual), filepath.Base(goldenFile))
			assert.NilError(t, exec.Command("go", "build", "-tags="+buildTag, goldenFile).Run()) // nolint: gosec
		})
	}
}
