package freightdb

// Code generated by spanner-aip-go. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"

	"cloud.google.com/go/spanner"
	"cloud.google.com/go/spanner/spansql"
	"google.golang.org/api/iterator"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type ShippersRow struct {
	ShipperId  string           `spanner:"shipper_id"`
	CreateTime time.Time        `spanner:"create_time"`
	UpdateTime time.Time        `spanner:"update_time"`
	DeleteTime spanner.NullTime `spanner:"delete_time"`
	Shipments  []*ShipmentsRow  `spanner:"shipments"`
}

func (*ShippersRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"create_time",
		"update_time",
		"delete_time",
	}
}

func (*ShippersRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"create_time",
		"update_time",
		"delete_time",
	}
}

func (*ShippersRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
	}
}

func (r *ShippersRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	return nil
}

func (r *ShippersRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal shippers row: shipper_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal shippers row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal shippers row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal shippers row: delete_time column: %w", err)
			}
		case "shipments":
			if err := row.Column(i, &r.Shipments); err != nil {
				return fmt.Errorf("unmarshal shippers interleaved row: shipments column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal shippers row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *ShippersRow) Mutate() (string, []string, []interface{}) {
	return "shippers", r.ColumnNames(), []interface{}{
		r.ShipperId,
		r.CreateTime,
		r.UpdateTime,
		r.DeleteTime,
	}
}

func (r *ShippersRow) MutateColumns(columns []string) (string, []string, []interface{}) {
	if len(columns) == 0 {
		columns = r.ColumnNames()
	}
	values := make([]interface{}, 0, len(columns))
	for _, column := range columns {
		switch column {
		case "shipper_id":
			values = append(values, r.ShipperId)
		case "create_time":
			values = append(values, r.CreateTime)
		case "update_time":
			values = append(values, r.UpdateTime)
		case "delete_time":
			values = append(values, r.DeleteTime)
		default:
			panic(fmt.Errorf("table shippers does not have column %s", column))
		}
	}
	return "shippers", columns, values
}

func (r *ShippersRow) Key() ShippersKey {
	return ShippersKey{
		ShipperId: r.ShipperId,
	}
}

type SitesRow struct {
	ShipperId   string              `spanner:"shipper_id"`
	SiteId      string              `spanner:"site_id"`
	CreateTime  time.Time           `spanner:"create_time"`
	UpdateTime  time.Time           `spanner:"update_time"`
	DeleteTime  spanner.NullTime    `spanner:"delete_time"`
	DisplayName spanner.NullString  `spanner:"display_name"`
	Latitude    spanner.NullFloat64 `spanner:"latitude"`
	Longitude   spanner.NullFloat64 `spanner:"longitude"`
}

func (*SitesRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"site_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
		"latitude",
		"longitude",
	}
}

func (*SitesRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"site_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
		"latitude",
		"longitude",
	}
}

func (*SitesRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("site_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("display_name"),
		spansql.ID("latitude"),
		spansql.ID("longitude"),
	}
}

func (r *SitesRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	if len(r.SiteId) > 63 {
		return fmt.Errorf("column site_id length > 63")
	}
	if !r.DisplayName.IsNull() && len(r.DisplayName.StringVal) > 63 {
		return fmt.Errorf("column display_name length > 63")
	}
	return nil
}

func (r *SitesRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal sites row: shipper_id column: %w", err)
			}
		case "site_id":
			if err := row.Column(i, &r.SiteId); err != nil {
				return fmt.Errorf("unmarshal sites row: site_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal sites row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal sites row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal sites row: delete_time column: %w", err)
			}
		case "display_name":
			if err := row.Column(i, &r.DisplayName); err != nil {
				return fmt.Errorf("unmarshal sites row: display_name column: %w", err)
			}
		case "latitude":
			if err := row.Column(i, &r.Latitude); err != nil {
				return fmt.Errorf("unmarshal sites row: latitude column: %w", err)
			}
		case "longitude":
			if err := row.Column(i, &r.Longitude); err != nil {
				return fmt.Errorf("unmarshal sites row: longitude column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal sites row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *SitesRow) Mutate() (string, []string, []interface{}) {
	return "sites", r.ColumnNames(), []interface{}{
		r.ShipperId,
		r.SiteId,
		r.CreateTime,
		r.UpdateTime,
		r.DeleteTime,
		r.DisplayName,
		r.Latitude,
		r.Longitude,
	}
}

func (r *SitesRow) MutateColumns(columns []string) (string, []string, []interface{}) {
	if len(columns) == 0 {
		columns = r.ColumnNames()
	}
	values := make([]interface{}, 0, len(columns))
	for _, column := range columns {
		switch column {
		case "shipper_id":
			values = append(values, r.ShipperId)
		case "site_id":
			values = append(values, r.SiteId)
		case "create_time":
			values = append(values, r.CreateTime)
		case "update_time":
			values = append(values, r.UpdateTime)
		case "delete_time":
			values = append(values, r.DeleteTime)
		case "display_name":
			values = append(values, r.DisplayName)
		case "latitude":
			values = append(values, r.Latitude)
		case "longitude":
			values = append(values, r.Longitude)
		default:
			panic(fmt.Errorf("table sites does not have column %s", column))
		}
	}
	return "sites", columns, values
}

func (r *SitesRow) Key() SitesKey {
	return SitesKey{
		ShipperId: r.ShipperId,
		SiteId:    r.SiteId,
	}
}

type ShipmentsRow struct {
	ShipperId            string             `spanner:"shipper_id"`
	ShipmentId           string             `spanner:"shipment_id"`
	CreateTime           time.Time          `spanner:"create_time"`
	UpdateTime           time.Time          `spanner:"update_time"`
	DeleteTime           spanner.NullTime   `spanner:"delete_time"`
	OriginSiteId         spanner.NullString `spanner:"origin_site_id"`
	DestinationSiteId    spanner.NullString `spanner:"destination_site_id"`
	PickupEarliestTime   spanner.NullTime   `spanner:"pickup_earliest_time"`
	PickupLatestTime     spanner.NullTime   `spanner:"pickup_latest_time"`
	DeliveryEarliestTime spanner.NullTime   `spanner:"delivery_earliest_time"`
	DeliveryLatestTime   spanner.NullTime   `spanner:"delivery_latest_time"`
	LineItems            []*LineItemsRow    `spanner:"line_items"`
}

func (*ShipmentsRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"shipment_id",
		"create_time",
		"update_time",
		"delete_time",
		"origin_site_id",
		"destination_site_id",
		"pickup_earliest_time",
		"pickup_latest_time",
		"delivery_earliest_time",
		"delivery_latest_time",
	}
}

func (*ShipmentsRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"shipment_id",
		"create_time",
		"update_time",
		"delete_time",
		"origin_site_id",
		"destination_site_id",
		"pickup_earliest_time",
		"pickup_latest_time",
		"delivery_earliest_time",
		"delivery_latest_time",
	}
}

func (*ShipmentsRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("shipment_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("origin_site_id"),
		spansql.ID("destination_site_id"),
		spansql.ID("pickup_earliest_time"),
		spansql.ID("pickup_latest_time"),
		spansql.ID("delivery_earliest_time"),
		spansql.ID("delivery_latest_time"),
	}
}

func (r *ShipmentsRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	if len(r.ShipmentId) > 63 {
		return fmt.Errorf("column shipment_id length > 63")
	}
	if !r.OriginSiteId.IsNull() && len(r.OriginSiteId.StringVal) > 63 {
		return fmt.Errorf("column origin_site_id length > 63")
	}
	if !r.DestinationSiteId.IsNull() && len(r.DestinationSiteId.StringVal) > 63 {
		return fmt.Errorf("column destination_site_id length > 63")
	}
	return nil
}

func (r *ShipmentsRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal shipments row: shipper_id column: %w", err)
			}
		case "shipment_id":
			if err := row.Column(i, &r.ShipmentId); err != nil {
				return fmt.Errorf("unmarshal shipments row: shipment_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delete_time column: %w", err)
			}
		case "origin_site_id":
			if err := row.Column(i, &r.OriginSiteId); err != nil {
				return fmt.Errorf("unmarshal shipments row: origin_site_id column: %w", err)
			}
		case "destination_site_id":
			if err := row.Column(i, &r.DestinationSiteId); err != nil {
				return fmt.Errorf("unmarshal shipments row: destination_site_id column: %w", err)
			}
		case "pickup_earliest_time":
			if err := row.Column(i, &r.PickupEarliestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: pickup_earliest_time column: %w", err)
			}
		case "pickup_latest_time":
			if err := row.Column(i, &r.PickupLatestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: pickup_latest_time column: %w", err)
			}
		case "delivery_earliest_time":
			if err := row.Column(i, &r.DeliveryEarliestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delivery_earliest_time column: %w", err)
			}
		case "delivery_latest_time":
			if err := row.Column(i, &r.DeliveryLatestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delivery_latest_time column: %w", err)
			}
		case "line_items":
			if err := row.Column(i, &r.LineItems); err != nil {
				return fmt.Errorf("unmarshal shipments interleaved row: line_items column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal shipments row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *ShipmentsRow) Mutate() (string, []string, []interface{}) {
	return "shipments", r.ColumnNames(), []interface{}{
		r.ShipperId,
		r.ShipmentId,
		r.CreateTime,
		r.UpdateTime,
		r.DeleteTime,
		r.OriginSiteId,
		r.DestinationSiteId,
		r.PickupEarliestTime,
		r.PickupLatestTime,
		r.DeliveryEarliestTime,
		r.DeliveryLatestTime,
	}
}

func (r *ShipmentsRow) MutateColumns(columns []string) (string, []string, []interface{}) {
	if len(columns) == 0 {
		columns = r.ColumnNames()
	}
	values := make([]interface{}, 0, len(columns))
	for _, column := range columns {
		switch column {
		case "shipper_id":
			values = append(values, r.ShipperId)
		case "shipment_id":
			values = append(values, r.ShipmentId)
		case "create_time":
			values = append(values, r.CreateTime)
		case "update_time":
			values = append(values, r.UpdateTime)
		case "delete_time":
			values = append(values, r.DeleteTime)
		case "origin_site_id":
			values = append(values, r.OriginSiteId)
		case "destination_site_id":
			values = append(values, r.DestinationSiteId)
		case "pickup_earliest_time":
			values = append(values, r.PickupEarliestTime)
		case "pickup_latest_time":
			values = append(values, r.PickupLatestTime)
		case "delivery_earliest_time":
			values = append(values, r.DeliveryEarliestTime)
		case "delivery_latest_time":
			values = append(values, r.DeliveryLatestTime)
		default:
			panic(fmt.Errorf("table shipments does not have column %s", column))
		}
	}
	return "shipments", columns, values
}

func (r *ShipmentsRow) Key() ShipmentsKey {
	return ShipmentsKey{
		ShipperId:  r.ShipperId,
		ShipmentId: r.ShipmentId,
	}
}

type LineItemsRow struct {
	ShipperId  string              `spanner:"shipper_id"`
	ShipmentId string              `spanner:"shipment_id"`
	LineNumber int64               `spanner:"line_number"`
	Title      spanner.NullString  `spanner:"title"`
	Quantity   spanner.NullFloat64 `spanner:"quantity"`
	WeightKg   spanner.NullFloat64 `spanner:"weight_kg"`
	VolumeM3   spanner.NullFloat64 `spanner:"volume_m3"`
}

func (*LineItemsRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"shipment_id",
		"line_number",
		"title",
		"quantity",
		"weight_kg",
		"volume_m3",
	}
}

func (*LineItemsRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"shipment_id",
		"line_number",
		"title",
		"quantity",
		"weight_kg",
		"volume_m3",
	}
}

func (*LineItemsRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("shipment_id"),
		spansql.ID("line_number"),
		spansql.ID("title"),
		spansql.ID("quantity"),
		spansql.ID("weight_kg"),
		spansql.ID("volume_m3"),
	}
}

func (r *LineItemsRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	if len(r.ShipmentId) > 63 {
		return fmt.Errorf("column shipment_id length > 63")
	}
	if !r.Title.IsNull() && len(r.Title.StringVal) > 63 {
		return fmt.Errorf("column title length > 63")
	}
	return nil
}

func (r *LineItemsRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal line_items row: shipper_id column: %w", err)
			}
		case "shipment_id":
			if err := row.Column(i, &r.ShipmentId); err != nil {
				return fmt.Errorf("unmarshal line_items row: shipment_id column: %w", err)
			}
		case "line_number":
			if err := row.Column(i, &r.LineNumber); err != nil {
				return fmt.Errorf("unmarshal line_items row: line_number column: %w", err)
			}
		case "title":
			if err := row.Column(i, &r.Title); err != nil {
				return fmt.Errorf("unmarshal line_items row: title column: %w", err)
			}
		case "quantity":
			if err := row.Column(i, &r.Quantity); err != nil {
				return fmt.Errorf("unmarshal line_items row: quantity column: %w", err)
			}
		case "weight_kg":
			if err := row.Column(i, &r.WeightKg); err != nil {
				return fmt.Errorf("unmarshal line_items row: weight_kg column: %w", err)
			}
		case "volume_m3":
			if err := row.Column(i, &r.VolumeM3); err != nil {
				return fmt.Errorf("unmarshal line_items row: volume_m3 column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal line_items row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *LineItemsRow) Mutate() (string, []string, []interface{}) {
	return "line_items", r.ColumnNames(), []interface{}{
		r.ShipperId,
		r.ShipmentId,
		r.LineNumber,
		r.Title,
		r.Quantity,
		r.WeightKg,
		r.VolumeM3,
	}
}

func (r *LineItemsRow) MutateColumns(columns []string) (string, []string, []interface{}) {
	if len(columns) == 0 {
		columns = r.ColumnNames()
	}
	values := make([]interface{}, 0, len(columns))
	for _, column := range columns {
		switch column {
		case "shipper_id":
			values = append(values, r.ShipperId)
		case "shipment_id":
			values = append(values, r.ShipmentId)
		case "line_number":
			values = append(values, r.LineNumber)
		case "title":
			values = append(values, r.Title)
		case "quantity":
			values = append(values, r.Quantity)
		case "weight_kg":
			values = append(values, r.WeightKg)
		case "volume_m3":
			values = append(values, r.VolumeM3)
		default:
			panic(fmt.Errorf("table line_items does not have column %s", column))
		}
	}
	return "line_items", columns, values
}

func (r *LineItemsRow) Key() LineItemsKey {
	return LineItemsKey{
		ShipperId:  r.ShipperId,
		ShipmentId: r.ShipmentId,
		LineNumber: r.LineNumber,
	}
}

type ShippersKey struct {
	ShipperId string
}

func (k ShippersKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
	}
}

func (k ShippersKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k ShippersKey) Delete() *spanner.Mutation {
	return spanner.Delete("shippers", k.SpannerKey())
}

func (ShippersKey) Order() []spansql.Order {
	return []spansql.Order{
		{Expr: spansql.ID("shipper_id"), Desc: false},
	}
}

func (k ShippersKey) BoolExpr() spansql.BoolExpr {
	cmp0 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	}
	b := spansql.BoolExpr(cmp0)
	return spansql.Paren{Expr: b}
}

type SitesKey struct {
	ShipperId string
	SiteId    string
}

func (k SitesKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
		k.SiteId,
	}
}

func (k SitesKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k SitesKey) Delete() *spanner.Mutation {
	return spanner.Delete("sites", k.SpannerKey())
}

func (SitesKey) Order() []spansql.Order {
	return []spansql.Order{
		{Expr: spansql.ID("shipper_id"), Desc: false},
		{Expr: spansql.ID("site_id"), Desc: false},
	}
}

func (k SitesKey) BoolExpr() spansql.BoolExpr {
	cmp0 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	}
	cmp1 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("site_id"),
		RHS: spansql.StringLiteral(k.SiteId),
	}
	b := spansql.BoolExpr(cmp0)
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: cmp1,
	}
	return spansql.Paren{Expr: b}
}

type ShipmentsKey struct {
	ShipperId  string
	ShipmentId string
}

func (k ShipmentsKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
		k.ShipmentId,
	}
}

func (k ShipmentsKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k ShipmentsKey) Delete() *spanner.Mutation {
	return spanner.Delete("shipments", k.SpannerKey())
}

func (ShipmentsKey) Order() []spansql.Order {
	return []spansql.Order{
		{Expr: spansql.ID("shipper_id"), Desc: false},
		{Expr: spansql.ID("shipment_id"), Desc: false},
	}
}

func (k ShipmentsKey) BoolExpr() spansql.BoolExpr {
	cmp0 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	}
	cmp1 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipment_id"),
		RHS: spansql.StringLiteral(k.ShipmentId),
	}
	b := spansql.BoolExpr(cmp0)
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: cmp1,
	}
	return spansql.Paren{Expr: b}
}

type LineItemsKey struct {
	ShipperId  string
	ShipmentId string
	LineNumber int64
}

func (k LineItemsKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
		k.ShipmentId,
		k.LineNumber,
	}
}

func (k LineItemsKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k LineItemsKey) Delete() *spanner.Mutation {
	return spanner.Delete("line_items", k.SpannerKey())
}

func (LineItemsKey) Order() []spansql.Order {
	return []spansql.Order{
		{Expr: spansql.ID("shipper_id"), Desc: false},
		{Expr: spansql.ID("shipment_id"), Desc: false},
		{Expr: spansql.ID("line_number"), Desc: false},
	}
}

func (k LineItemsKey) BoolExpr() spansql.BoolExpr {
	cmp0 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	}
	cmp1 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipment_id"),
		RHS: spansql.StringLiteral(k.ShipmentId),
	}
	cmp2 := spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("line_number"),
		RHS: spansql.IntegerLiteral(k.LineNumber),
	}
	b := spansql.BoolExpr(cmp0)
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: cmp1,
	}
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: cmp2,
	}
	return spansql.Paren{Expr: b}
}

type ShippersRowIterator struct {
	*spanner.RowIterator
}

func (i *ShippersRowIterator) Next() (*ShippersRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row ShippersRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *ShippersRowIterator) Do(f func(row *ShippersRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row ShippersRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type SitesRowIterator struct {
	*spanner.RowIterator
}

func (i *SitesRowIterator) Next() (*SitesRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row SitesRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *SitesRowIterator) Do(f func(row *SitesRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row SitesRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type ShipmentsRowIterator struct {
	*spanner.RowIterator
}

func (i *ShipmentsRowIterator) Next() (*ShipmentsRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row ShipmentsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *ShipmentsRowIterator) Do(f func(row *ShipmentsRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row ShipmentsRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type LineItemsRowIterator struct {
	*spanner.RowIterator
}

func (i *LineItemsRowIterator) Next() (*LineItemsRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row LineItemsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *LineItemsRowIterator) Do(f func(row *LineItemsRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row LineItemsRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type ReadTransaction struct {
	Tx SpannerReadTransaction
}

func Query(tx SpannerReadTransaction) ReadTransaction {
	return ReadTransaction{Tx: tx}
}

func (t ReadTransaction) ReadShippersRows(
	ctx context.Context,
	keySet spanner.KeySet,
) *ShippersRowIterator {
	return &ShippersRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"shippers",
			keySet,
			((*ShippersRow)(nil)).ColumnNames(),
		),
	}
}

type GetShippersRowQuery struct {
	Key       ShippersKey
	Shipments bool
	LineItems bool
}

func (q *GetShippersRowQuery) hasInterleavedTables() bool {
	return q.Shipments || q.LineItems
}

func (t ReadTransaction) GetShippersRow(
	ctx context.Context,
	query GetShippersRowQuery,
) (*ShippersRow, error) {
	if query.hasInterleavedTables() {
		return t.getShippersRowInterleaved(ctx, query)
	}
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"shippers",
		query.Key.SpannerKey(),
		((*ShippersRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row ShippersRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

type BatchGetShippersRowsQuery struct {
	Keys      []ShippersKey
	Shipments bool
	LineItems bool
}

func (q *BatchGetShippersRowsQuery) hasInterleavedTables() bool {
	return q.Shipments || q.LineItems
}

func (t ReadTransaction) BatchGetShippersRows(
	ctx context.Context,
	query BatchGetShippersRowsQuery,
) (map[ShippersKey]*ShippersRow, error) {
	if query.hasInterleavedTables() {
		return t.batchGetShippersRowsInterleaved(ctx, query)
	}
	spannerKeys := make([]spanner.KeySet, 0, len(query.Keys))
	for _, key := range query.Keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	foundRows := make(map[ShippersKey]*ShippersRow, len(query.Keys))
	if err := t.ReadShippersRows(ctx, spanner.KeySets(spannerKeys...)).Do(func(row *ShippersRow) error {
		foundRows[row.Key()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	return foundRows, nil
}

type ListShippersRowsQuery struct {
	Where       spansql.BoolExpr
	Order       []spansql.Order
	Limit       int32
	Offset      int64
	Params      map[string]interface{}
	ShowDeleted bool
	Shipments   bool
	LineItems   bool
}

func (q *ListShippersRowsQuery) hasInterleavedTables() bool {
	return q.Shipments || q.LineItems
}

func (t ReadTransaction) ListShippersRows(
	ctx context.Context,
	query ListShippersRowsQuery,
) *ShippersRowIterator {
	if query.hasInterleavedTables() {
		return t.listShippersRowsInterleaved(ctx, query)
	}
	if len(query.Order) == 0 {
		query.Order = ShippersKey{}.Order()
	}
	params := map[string]interface{}{
		"__limit":  int64(query.Limit),
		"__offset": query.Offset,
	}
	for param, value := range query.Params {
		if _, ok := params[param]; ok {
			panic(fmt.Errorf("invalid param: %s", param))
		}
		params[param] = value
	}
	if query.Where == nil {
		query.Where = spansql.True
	}
	if !query.ShowDeleted {
		query.Where = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: spansql.Paren{Expr: query.Where},
			RHS: spansql.IsOp{
				LHS: spansql.ID("delete_time"),
				RHS: spansql.Null,
			},
		}
	}
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*ShippersRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "shippers"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("__limit"),
			Offset: spansql.Param("__offset"),
		}.SQL(),
		Params: params,
	}
	return &ShippersRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

func (t ReadTransaction) listShippersRowsInterleaved(
	ctx context.Context,
	query ListShippersRowsQuery,
) *ShippersRowIterator {
	if len(query.Order) == 0 {
		query.Order = ShippersKey{}.Order()
	}
	var q strings.Builder
	_, _ = q.WriteString(`
SELECT
    shipper_id,
    create_time,
    update_time,
    delete_time,
`)
	if query.Shipments {
		_, _ = q.WriteString(`
    ARRAY(
        SELECT AS STRUCT
            shipper_id,
            shipment_id,
            create_time,
            update_time,
            delete_time,
            origin_site_id,
            destination_site_id,
            pickup_earliest_time,
            pickup_latest_time,
            delivery_earliest_time,
            delivery_latest_time,
`)
		if query.LineItems {
			_, _ = q.WriteString(`
            ARRAY(
                SELECT AS STRUCT
                    shipper_id,
                    shipment_id,
                    line_number,
                    title,
                    quantity,
                    weight_kg,
                    volume_m3,
`)
			_, _ = q.WriteString(`
                FROM 
                    line_items
                WHERE 
                    line_items.shipper_id = shipments.shipper_id AND
                    line_items.shipment_id = shipments.shipment_id
                ORDER BY 
                    shipper_id,
                    shipment_id,
                    line_number
            ) AS line_items,
`)
		}
		_, _ = q.WriteString(`
        FROM 
            shipments
        WHERE 
`)
		if !query.ShowDeleted {
			_, _ = q.WriteString(`
            delete_time IS NULL AND
`)
		}
		_, _ = q.WriteString(`
            shipments.shipper_id = shippers.shipper_id
        ORDER BY 
            shipper_id,
            shipment_id
    ) AS shipments,
`)
	}
	_, _ = q.WriteString(`
FROM
    shippers
`)
	if query.Where == nil {
		query.Where = spansql.True
	}
	if !query.ShowDeleted {
		query.Where = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: spansql.Paren{Expr: query.Where},
			RHS: spansql.IsOp{
				LHS: spansql.ID("delete_time"),
				RHS: spansql.Null,
			},
		}
	}
	_, _ = q.WriteString("WHERE (")
	_, _ = q.WriteString(query.Where.SQL())
	_, _ = q.WriteString(") ")
	if len(query.Order) > 0 {
		_, _ = q.WriteString("ORDER BY ")
		for i, order := range query.Order {
			_, _ = q.WriteString(order.SQL())
			if i < len(query.Order)-1 {
				_, _ = q.WriteString(", ")
			} else {
				_, _ = q.WriteString(" ")
			}
		}
	}
	_, _ = q.WriteString("LIMIT @__limit ")
	_, _ = q.WriteString("OFFSET @__offset ")
	stmt := spanner.Statement{
		SQL: q.String(),
		Params: map[string]interface{}{
			"__limit":  int64(query.Limit),
			"__offset": query.Offset,
		},
	}
	return &ShippersRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

func (t ReadTransaction) getShippersRowInterleaved(
	ctx context.Context,
	query GetShippersRowQuery,
) (*ShippersRow, error) {
	it := t.listShippersRowsInterleaved(ctx, ListShippersRowsQuery{
		Limit:     1,
		Where:     query.Key.BoolExpr(),
		Shipments: query.Shipments,
		LineItems: query.LineItems,
	})
	defer it.Stop()
	row, err := it.Next()
	if err != nil {
		if err == iterator.Done {
			return nil, status.Errorf(codes.NotFound, "not found: %v", query.Key)
		}
		return nil, err
	}
	return row, nil
}

func (t ReadTransaction) batchGetShippersRowsInterleaved(
	ctx context.Context,
	query BatchGetShippersRowsQuery,
) (map[ShippersKey]*ShippersRow, error) {
	if len(query.Keys) == 0 {
		return nil, nil
	}
	where := query.Keys[0].BoolExpr()
	for _, key := range query.Keys[1:] {
		where = spansql.LogicalOp{
			Op:  spansql.Or,
			LHS: where,
			RHS: key.BoolExpr(),
		}
	}
	foundRows := make(map[ShippersKey]*ShippersRow, len(query.Keys))
	if err := t.ListShippersRows(ctx, ListShippersRowsQuery{
		Where:     spansql.Paren{Expr: where},
		Limit:     int32(len(query.Keys)),
		Shipments: query.Shipments,
		LineItems: query.LineItems,
	}).Do(func(row *ShippersRow) error {
		foundRows[row.Key()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	return foundRows, nil
}

func (t ReadTransaction) ReadSitesRows(
	ctx context.Context,
	keySet spanner.KeySet,
) *SitesRowIterator {
	return &SitesRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"sites",
			keySet,
			((*SitesRow)(nil)).ColumnNames(),
		),
	}
}

type GetSitesRowQuery struct {
	Key SitesKey
}

func (t ReadTransaction) GetSitesRow(
	ctx context.Context,
	query GetSitesRowQuery,
) (*SitesRow, error) {
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"sites",
		query.Key.SpannerKey(),
		((*SitesRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row SitesRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

type BatchGetSitesRowsQuery struct {
	Keys []SitesKey
}

func (t ReadTransaction) BatchGetSitesRows(
	ctx context.Context,
	query BatchGetSitesRowsQuery,
) (map[SitesKey]*SitesRow, error) {
	spannerKeys := make([]spanner.KeySet, 0, len(query.Keys))
	for _, key := range query.Keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	foundRows := make(map[SitesKey]*SitesRow, len(query.Keys))
	if err := t.ReadSitesRows(ctx, spanner.KeySets(spannerKeys...)).Do(func(row *SitesRow) error {
		foundRows[row.Key()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	return foundRows, nil
}

type ListSitesRowsQuery struct {
	Where       spansql.BoolExpr
	Order       []spansql.Order
	Limit       int32
	Offset      int64
	Params      map[string]interface{}
	ShowDeleted bool
}

func (t ReadTransaction) ListSitesRows(
	ctx context.Context,
	query ListSitesRowsQuery,
) *SitesRowIterator {
	if len(query.Order) == 0 {
		query.Order = SitesKey{}.Order()
	}
	params := map[string]interface{}{
		"__limit":  int64(query.Limit),
		"__offset": query.Offset,
	}
	for param, value := range query.Params {
		if _, ok := params[param]; ok {
			panic(fmt.Errorf("invalid param: %s", param))
		}
		params[param] = value
	}
	if query.Where == nil {
		query.Where = spansql.True
	}
	if !query.ShowDeleted {
		query.Where = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: spansql.Paren{Expr: query.Where},
			RHS: spansql.IsOp{
				LHS: spansql.ID("delete_time"),
				RHS: spansql.Null,
			},
		}
	}
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*SitesRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "sites"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("__limit"),
			Offset: spansql.Param("__offset"),
		}.SQL(),
		Params: params,
	}
	return &SitesRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

func (t ReadTransaction) ReadShipmentsRows(
	ctx context.Context,
	keySet spanner.KeySet,
) *ShipmentsRowIterator {
	return &ShipmentsRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"shipments",
			keySet,
			((*ShipmentsRow)(nil)).ColumnNames(),
		),
	}
}

type GetShipmentsRowQuery struct {
	Key       ShipmentsKey
	LineItems bool
}

func (q *GetShipmentsRowQuery) hasInterleavedTables() bool {
	return q.LineItems
}

func (t ReadTransaction) GetShipmentsRow(
	ctx context.Context,
	query GetShipmentsRowQuery,
) (*ShipmentsRow, error) {
	if query.hasInterleavedTables() {
		return t.getShipmentsRowInterleaved(ctx, query)
	}
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"shipments",
		query.Key.SpannerKey(),
		((*ShipmentsRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row ShipmentsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

type BatchGetShipmentsRowsQuery struct {
	Keys      []ShipmentsKey
	LineItems bool
}

func (q *BatchGetShipmentsRowsQuery) hasInterleavedTables() bool {
	return q.LineItems
}

func (t ReadTransaction) BatchGetShipmentsRows(
	ctx context.Context,
	query BatchGetShipmentsRowsQuery,
) (map[ShipmentsKey]*ShipmentsRow, error) {
	if query.hasInterleavedTables() {
		return t.batchGetShipmentsRowsInterleaved(ctx, query)
	}
	spannerKeys := make([]spanner.KeySet, 0, len(query.Keys))
	for _, key := range query.Keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	foundRows := make(map[ShipmentsKey]*ShipmentsRow, len(query.Keys))
	if err := t.ReadShipmentsRows(ctx, spanner.KeySets(spannerKeys...)).Do(func(row *ShipmentsRow) error {
		foundRows[row.Key()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	return foundRows, nil
}

type ListShipmentsRowsQuery struct {
	Where       spansql.BoolExpr
	Order       []spansql.Order
	Limit       int32
	Offset      int64
	Params      map[string]interface{}
	ShowDeleted bool
	LineItems   bool
}

func (q *ListShipmentsRowsQuery) hasInterleavedTables() bool {
	return q.LineItems
}

func (t ReadTransaction) ListShipmentsRows(
	ctx context.Context,
	query ListShipmentsRowsQuery,
) *ShipmentsRowIterator {
	if query.hasInterleavedTables() {
		return t.listShipmentsRowsInterleaved(ctx, query)
	}
	if len(query.Order) == 0 {
		query.Order = ShipmentsKey{}.Order()
	}
	params := map[string]interface{}{
		"__limit":  int64(query.Limit),
		"__offset": query.Offset,
	}
	for param, value := range query.Params {
		if _, ok := params[param]; ok {
			panic(fmt.Errorf("invalid param: %s", param))
		}
		params[param] = value
	}
	if query.Where == nil {
		query.Where = spansql.True
	}
	if !query.ShowDeleted {
		query.Where = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: spansql.Paren{Expr: query.Where},
			RHS: spansql.IsOp{
				LHS: spansql.ID("delete_time"),
				RHS: spansql.Null,
			},
		}
	}
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*ShipmentsRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "shipments"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("__limit"),
			Offset: spansql.Param("__offset"),
		}.SQL(),
		Params: params,
	}
	return &ShipmentsRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

func (t ReadTransaction) listShipmentsRowsInterleaved(
	ctx context.Context,
	query ListShipmentsRowsQuery,
) *ShipmentsRowIterator {
	if len(query.Order) == 0 {
		query.Order = ShipmentsKey{}.Order()
	}
	var q strings.Builder
	_, _ = q.WriteString(`
SELECT
    shipper_id,
    shipment_id,
    create_time,
    update_time,
    delete_time,
    origin_site_id,
    destination_site_id,
    pickup_earliest_time,
    pickup_latest_time,
    delivery_earliest_time,
    delivery_latest_time,
`)
	if query.LineItems {
		_, _ = q.WriteString(`
    ARRAY(
        SELECT AS STRUCT
            shipper_id,
            shipment_id,
            line_number,
            title,
            quantity,
            weight_kg,
            volume_m3,
`)
		_, _ = q.WriteString(`
        FROM 
            line_items
        WHERE 
            line_items.shipper_id = shipments.shipper_id AND
            line_items.shipment_id = shipments.shipment_id
        ORDER BY 
            shipper_id,
            shipment_id,
            line_number
    ) AS line_items,
`)
	}
	_, _ = q.WriteString(`
FROM
    shipments
`)
	if query.Where == nil {
		query.Where = spansql.True
	}
	if !query.ShowDeleted {
		query.Where = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: spansql.Paren{Expr: query.Where},
			RHS: spansql.IsOp{
				LHS: spansql.ID("delete_time"),
				RHS: spansql.Null,
			},
		}
	}
	_, _ = q.WriteString("WHERE (")
	_, _ = q.WriteString(query.Where.SQL())
	_, _ = q.WriteString(") ")
	if len(query.Order) > 0 {
		_, _ = q.WriteString("ORDER BY ")
		for i, order := range query.Order {
			_, _ = q.WriteString(order.SQL())
			if i < len(query.Order)-1 {
				_, _ = q.WriteString(", ")
			} else {
				_, _ = q.WriteString(" ")
			}
		}
	}
	_, _ = q.WriteString("LIMIT @__limit ")
	_, _ = q.WriteString("OFFSET @__offset ")
	stmt := spanner.Statement{
		SQL: q.String(),
		Params: map[string]interface{}{
			"__limit":  int64(query.Limit),
			"__offset": query.Offset,
		},
	}
	return &ShipmentsRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

func (t ReadTransaction) getShipmentsRowInterleaved(
	ctx context.Context,
	query GetShipmentsRowQuery,
) (*ShipmentsRow, error) {
	it := t.listShipmentsRowsInterleaved(ctx, ListShipmentsRowsQuery{
		Limit:     1,
		Where:     query.Key.BoolExpr(),
		LineItems: query.LineItems,
	})
	defer it.Stop()
	row, err := it.Next()
	if err != nil {
		if err == iterator.Done {
			return nil, status.Errorf(codes.NotFound, "not found: %v", query.Key)
		}
		return nil, err
	}
	return row, nil
}

func (t ReadTransaction) batchGetShipmentsRowsInterleaved(
	ctx context.Context,
	query BatchGetShipmentsRowsQuery,
) (map[ShipmentsKey]*ShipmentsRow, error) {
	if len(query.Keys) == 0 {
		return nil, nil
	}
	where := query.Keys[0].BoolExpr()
	for _, key := range query.Keys[1:] {
		where = spansql.LogicalOp{
			Op:  spansql.Or,
			LHS: where,
			RHS: key.BoolExpr(),
		}
	}
	foundRows := make(map[ShipmentsKey]*ShipmentsRow, len(query.Keys))
	if err := t.ListShipmentsRows(ctx, ListShipmentsRowsQuery{
		Where:     spansql.Paren{Expr: where},
		Limit:     int32(len(query.Keys)),
		LineItems: query.LineItems,
	}).Do(func(row *ShipmentsRow) error {
		foundRows[row.Key()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	return foundRows, nil
}

func (t ReadTransaction) ReadLineItemsRows(
	ctx context.Context,
	keySet spanner.KeySet,
) *LineItemsRowIterator {
	return &LineItemsRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"line_items",
			keySet,
			((*LineItemsRow)(nil)).ColumnNames(),
		),
	}
}

type GetLineItemsRowQuery struct {
	Key LineItemsKey
}

func (t ReadTransaction) GetLineItemsRow(
	ctx context.Context,
	query GetLineItemsRowQuery,
) (*LineItemsRow, error) {
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"line_items",
		query.Key.SpannerKey(),
		((*LineItemsRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row LineItemsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

type BatchGetLineItemsRowsQuery struct {
	Keys []LineItemsKey
}

func (t ReadTransaction) BatchGetLineItemsRows(
	ctx context.Context,
	query BatchGetLineItemsRowsQuery,
) (map[LineItemsKey]*LineItemsRow, error) {
	spannerKeys := make([]spanner.KeySet, 0, len(query.Keys))
	for _, key := range query.Keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	foundRows := make(map[LineItemsKey]*LineItemsRow, len(query.Keys))
	if err := t.ReadLineItemsRows(ctx, spanner.KeySets(spannerKeys...)).Do(func(row *LineItemsRow) error {
		foundRows[row.Key()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	return foundRows, nil
}

type ListLineItemsRowsQuery struct {
	Where  spansql.BoolExpr
	Order  []spansql.Order
	Limit  int32
	Offset int64
	Params map[string]interface{}
}

func (t ReadTransaction) ListLineItemsRows(
	ctx context.Context,
	query ListLineItemsRowsQuery,
) *LineItemsRowIterator {
	if len(query.Order) == 0 {
		query.Order = LineItemsKey{}.Order()
	}
	params := map[string]interface{}{
		"__limit":  int64(query.Limit),
		"__offset": query.Offset,
	}
	for param, value := range query.Params {
		if _, ok := params[param]; ok {
			panic(fmt.Errorf("invalid param: %s", param))
		}
		params[param] = value
	}
	if query.Where == nil {
		query.Where = spansql.True
	}
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*LineItemsRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "line_items"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("__limit"),
			Offset: spansql.Param("__offset"),
		}.SQL(),
		Params: params,
	}
	return &LineItemsRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

type SpannerReadTransaction interface {
	Read(ctx context.Context, table string, keys spanner.KeySet, columns []string) *spanner.RowIterator
	ReadRow(ctx context.Context, table string, key spanner.Key, columns []string) (*spanner.Row, error)
	Query(ctx context.Context, statement spanner.Statement) *spanner.RowIterator
}
