package freightdb

// Code generated by aip-spanner-go. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"

	"cloud.google.com/go/spanner"
	"cloud.google.com/go/spanner/spansql"
	"google.golang.org/api/iterator"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type ShippersReadTransaction struct {
	Tx SpannerReadTransaction
}

func Shippers(tx SpannerReadTransaction) ShippersReadTransaction {
	return ShippersReadTransaction{Tx: tx}
}

func (t ShippersReadTransaction) Read(
	ctx context.Context,
	keySet spanner.KeySet,
) *ShippersRowIterator {
	return &ShippersRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"shippers",
			keySet,
			((*ShippersRow)(nil)).ColumnNames(),
		),
	}
}

func (t ShippersReadTransaction) Get(
	ctx context.Context,
	key ShippersPrimaryKey,
) (*ShippersRow, error) {
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"shippers",
		key.SpannerKey(),
		((*ShippersRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row ShippersRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (t ShippersReadTransaction) BatchGet(
	ctx context.Context,
	keys []ShippersPrimaryKey,
) ([]*ShippersRow, error) {
	spannerKeys := make([]spanner.KeySet, 0, len(keys))
	for _, key := range keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	it := t.Read(ctx, spanner.KeySets(spannerKeys...))
	defer it.Stop()
	foundRows := make(map[ShippersPrimaryKey]*ShippersRow, len(keys))
	if err := it.Do(func(row *ShippersRow) error {
		foundRows[row.PrimaryKey()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	rows := make([]*ShippersRow, 0, len(keys))
	for _, key := range keys {
		row, ok := foundRows[key]
		if !ok {
			return nil, status.Errorf(codes.NotFound, "not found: %v", key)
		}
		rows = append(rows, row)
	}
	return rows, nil
}

func (t ShippersReadTransaction) List(
	ctx context.Context,
	query ListQuery,
) *ShippersRowIterator {
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*ShippersRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "shippers"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("limit"),
			Offset: spansql.Param("offset"),
		}.SQL(),
		Params: map[string]interface{}{
			"limit":  query.Limit,
			"offset": query.Offset,
		},
	}
	return &ShippersRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

type ShippersRowIterator struct {
	*spanner.RowIterator
}

func (i *ShippersRowIterator) Next() (*ShippersRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row ShippersRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *ShippersRowIterator) Do(f func(row *ShippersRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row ShippersRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type ShippersPrimaryKey struct {
	ShipperId string
}

func (k ShippersPrimaryKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
	}
}

func (k ShippersPrimaryKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k ShippersPrimaryKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	return spansql.Paren{Expr: b}
}

func (k ShippersPrimaryKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	return spansql.Paren{Expr: b}
}

type ShippersPartialKey struct {
	ShipperId string
}

func (k ShippersPartialKey) SpannerKey() spanner.Key {
	return spanner.Key{k.ShipperId}
}

func (k ShippersPartialKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	return spansql.Paren{Expr: b}
}

func (k ShippersPartialKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	return spansql.Paren{Expr: b}
}

type ShippersKeyRange struct {
	Start ShippersPartialKey
	End   ShippersPartialKey
	Kind  spanner.KeyRangeKind
}

func (k ShippersKeyRange) SpannerKeySet() spanner.KeySet {
	return spanner.KeyRange{
		Start: k.Start.SpannerKey(),
		End:   k.End.SpannerKey(),
		Kind:  k.Kind,
	}
}

type ShippersRow struct {
	ShipperId  string           `spanner:"shipper_id"`
	CreateTime time.Time        `spanner:"create_time"`
	UpdateTime time.Time        `spanner:"update_time"`
	DeleteTime spanner.NullTime `spanner:"delete_time"`
}

func (*ShippersRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"create_time",
		"update_time",
		"delete_time",
	}
}

func (*ShippersRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"create_time",
		"update_time",
		"delete_time",
	}
}

func (*ShippersRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
	}
}

func (r *ShippersRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	return nil
}

func (r *ShippersRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal shippers row: shipper_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal shippers row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal shippers row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal shippers row: delete_time column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal shippers row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *ShippersRow) MutationForColumns(columns []string) (string, []string, []interface{}) {
	var values []interface{}
	return "shippers", columns, values
}

func (r *ShippersRow) Mutation() (string, []string, []interface{}) {
	return r.MutationForColumns(r.ColumnNames())
}

func (r *ShippersRow) Insert() *spanner.Mutation {
	return spanner.Insert(r.Mutation())
}

func (r *ShippersRow) InsertOrUpdate() *spanner.Mutation {
	return spanner.InsertOrUpdate(r.Mutation())
}

func (r *ShippersRow) Update() *spanner.Mutation {
	return spanner.Update(r.Mutation())
}

func (r *ShippersRow) InsertColumns(columns []string) *spanner.Mutation {
	return spanner.Insert(r.MutationForColumns(columns))
}

func (r *ShippersRow) InsertOrUpdateColumns(columns []string) *spanner.Mutation {
	return spanner.InsertOrUpdate(r.MutationForColumns(columns))
}

func (r *ShippersRow) UpdateColumns(columns []string) *spanner.Mutation {
	return spanner.Update(r.MutationForColumns(columns))
}

func (r *ShippersRow) PrimaryKey() ShippersPrimaryKey {
	return ShippersPrimaryKey{
		ShipperId: r.ShipperId,
	}
}

type SitesReadTransaction struct {
	Tx SpannerReadTransaction
}

func Sites(tx SpannerReadTransaction) SitesReadTransaction {
	return SitesReadTransaction{Tx: tx}
}

func (t SitesReadTransaction) Read(
	ctx context.Context,
	keySet spanner.KeySet,
) *SitesRowIterator {
	return &SitesRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"sites",
			keySet,
			((*SitesRow)(nil)).ColumnNames(),
		),
	}
}

func (t SitesReadTransaction) Get(
	ctx context.Context,
	key SitesPrimaryKey,
) (*SitesRow, error) {
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"sites",
		key.SpannerKey(),
		((*SitesRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row SitesRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (t SitesReadTransaction) BatchGet(
	ctx context.Context,
	keys []SitesPrimaryKey,
) ([]*SitesRow, error) {
	spannerKeys := make([]spanner.KeySet, 0, len(keys))
	for _, key := range keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	it := t.Read(ctx, spanner.KeySets(spannerKeys...))
	defer it.Stop()
	foundRows := make(map[SitesPrimaryKey]*SitesRow, len(keys))
	if err := it.Do(func(row *SitesRow) error {
		foundRows[row.PrimaryKey()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	rows := make([]*SitesRow, 0, len(keys))
	for _, key := range keys {
		row, ok := foundRows[key]
		if !ok {
			return nil, status.Errorf(codes.NotFound, "not found: %v", key)
		}
		rows = append(rows, row)
	}
	return rows, nil
}

func (t SitesReadTransaction) List(
	ctx context.Context,
	query ListQuery,
) *SitesRowIterator {
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*SitesRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "sites"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("limit"),
			Offset: spansql.Param("offset"),
		}.SQL(),
		Params: map[string]interface{}{
			"limit":  query.Limit,
			"offset": query.Offset,
		},
	}
	return &SitesRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

type SitesRowIterator struct {
	*spanner.RowIterator
}

func (i *SitesRowIterator) Next() (*SitesRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row SitesRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *SitesRowIterator) Do(f func(row *SitesRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row SitesRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type SitesPrimaryKey struct {
	ShipperId string
	SiteId    string
}

func (k SitesPrimaryKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
		k.SiteId,
	}
}

func (k SitesPrimaryKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k SitesPrimaryKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: spansql.ID("site_id"),
			RHS: spansql.StringLiteral(k.SiteId),
		},
	}
	return spansql.Paren{Expr: b}
}

func (k SitesPrimaryKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: append(prefix, spansql.ID("site_id")),
			RHS: spansql.StringLiteral(k.SiteId),
		},
	}
	return spansql.Paren{Expr: b}
}

type SitesPartialKey struct {
	ShipperId   string
	SiteId      string
	ValidSiteId bool
}

func (k SitesPartialKey) SpannerKey() spanner.Key {
	n := 1
	if k.ValidSiteId {
		n++
	}
	result := make(spanner.Key, 0, n)
	result = append(result, k.ShipperId)
	if k.ValidSiteId {
		result = append(result, k.SiteId)
	}
	return result
}

func (k SitesPartialKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k SitesPartialKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	if k.ValidSiteId {
		b = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: b,
			RHS: spansql.ComparisonOp{
				Op:  spansql.Eq,
				LHS: spansql.ID("site_id"),
				RHS: spansql.StringLiteral(k.SiteId),
			},
		}
	}
	return spansql.Paren{Expr: b}
}

func (k SitesPartialKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	if k.ValidSiteId {
		b = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: b,
			RHS: spansql.ComparisonOp{
				Op:  spansql.Eq,
				LHS: append(prefix, spansql.ID("site_id")),
				RHS: spansql.StringLiteral(k.SiteId),
			},
		}
	}
	return spansql.Paren{Expr: b}
}

type SitesKeyRange struct {
	Start SitesPartialKey
	End   SitesPartialKey
	Kind  spanner.KeyRangeKind
}

func (k SitesKeyRange) SpannerKeySet() spanner.KeySet {
	return spanner.KeyRange{
		Start: k.Start.SpannerKey(),
		End:   k.End.SpannerKey(),
		Kind:  k.Kind,
	}
}

type SitesRow struct {
	ShipperId   string              `spanner:"shipper_id"`
	SiteId      string              `spanner:"site_id"`
	CreateTime  time.Time           `spanner:"create_time"`
	UpdateTime  time.Time           `spanner:"update_time"`
	DeleteTime  spanner.NullTime    `spanner:"delete_time"`
	DisplayName spanner.NullString  `spanner:"display_name"`
	Latitude    spanner.NullFloat64 `spanner:"latitude"`
	Longitude   spanner.NullFloat64 `spanner:"longitude"`
}

func (*SitesRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"site_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
		"latitude",
		"longitude",
	}
}

func (*SitesRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"site_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
		"latitude",
		"longitude",
	}
}

func (*SitesRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("site_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("display_name"),
		spansql.ID("latitude"),
		spansql.ID("longitude"),
	}
}

func (r *SitesRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	if len(r.SiteId) > 63 {
		return fmt.Errorf("column site_id length > 63")
	}
	if !r.DisplayName.IsNull() && len(r.DisplayName.StringVal) > 63 {
		return fmt.Errorf("column display_name length > 63")
	}
	return nil
}

func (r *SitesRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal sites row: shipper_id column: %w", err)
			}
		case "site_id":
			if err := row.Column(i, &r.SiteId); err != nil {
				return fmt.Errorf("unmarshal sites row: site_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal sites row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal sites row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal sites row: delete_time column: %w", err)
			}
		case "display_name":
			if err := row.Column(i, &r.DisplayName); err != nil {
				return fmt.Errorf("unmarshal sites row: display_name column: %w", err)
			}
		case "latitude":
			if err := row.Column(i, &r.Latitude); err != nil {
				return fmt.Errorf("unmarshal sites row: latitude column: %w", err)
			}
		case "longitude":
			if err := row.Column(i, &r.Longitude); err != nil {
				return fmt.Errorf("unmarshal sites row: longitude column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal sites row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *SitesRow) MutationForColumns(columns []string) (string, []string, []interface{}) {
	var values []interface{}
	return "sites", columns, values
}

func (r *SitesRow) Mutation() (string, []string, []interface{}) {
	return r.MutationForColumns(r.ColumnNames())
}

func (r *SitesRow) Insert() *spanner.Mutation {
	return spanner.Insert(r.Mutation())
}

func (r *SitesRow) InsertOrUpdate() *spanner.Mutation {
	return spanner.InsertOrUpdate(r.Mutation())
}

func (r *SitesRow) Update() *spanner.Mutation {
	return spanner.Update(r.Mutation())
}

func (r *SitesRow) InsertColumns(columns []string) *spanner.Mutation {
	return spanner.Insert(r.MutationForColumns(columns))
}

func (r *SitesRow) InsertOrUpdateColumns(columns []string) *spanner.Mutation {
	return spanner.InsertOrUpdate(r.MutationForColumns(columns))
}

func (r *SitesRow) UpdateColumns(columns []string) *spanner.Mutation {
	return spanner.Update(r.MutationForColumns(columns))
}

func (r *SitesRow) PrimaryKey() SitesPrimaryKey {
	return SitesPrimaryKey{
		ShipperId: r.ShipperId,
		SiteId:    r.SiteId,
	}
}

type ShipmentsReadTransaction struct {
	Tx SpannerReadTransaction
}

func Shipments(tx SpannerReadTransaction) ShipmentsReadTransaction {
	return ShipmentsReadTransaction{Tx: tx}
}

func (t ShipmentsReadTransaction) Read(
	ctx context.Context,
	keySet spanner.KeySet,
) *ShipmentsRowIterator {
	return &ShipmentsRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"shipments",
			keySet,
			((*ShipmentsRow)(nil)).ColumnNames(),
		),
	}
}

func (t ShipmentsReadTransaction) Get(
	ctx context.Context,
	key ShipmentsPrimaryKey,
) (*ShipmentsRow, error) {
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"shipments",
		key.SpannerKey(),
		((*ShipmentsRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row ShipmentsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (t ShipmentsReadTransaction) BatchGet(
	ctx context.Context,
	keys []ShipmentsPrimaryKey,
) ([]*ShipmentsRow, error) {
	spannerKeys := make([]spanner.KeySet, 0, len(keys))
	for _, key := range keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	it := t.Read(ctx, spanner.KeySets(spannerKeys...))
	defer it.Stop()
	foundRows := make(map[ShipmentsPrimaryKey]*ShipmentsRow, len(keys))
	if err := it.Do(func(row *ShipmentsRow) error {
		foundRows[row.PrimaryKey()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	rows := make([]*ShipmentsRow, 0, len(keys))
	for _, key := range keys {
		row, ok := foundRows[key]
		if !ok {
			return nil, status.Errorf(codes.NotFound, "not found: %v", key)
		}
		rows = append(rows, row)
	}
	return rows, nil
}

func (t ShipmentsReadTransaction) List(
	ctx context.Context,
	query ListQuery,
) *ShipmentsRowIterator {
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*ShipmentsRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "shipments"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("limit"),
			Offset: spansql.Param("offset"),
		}.SQL(),
		Params: map[string]interface{}{
			"limit":  query.Limit,
			"offset": query.Offset,
		},
	}
	return &ShipmentsRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

type ShipmentsRowIterator struct {
	*spanner.RowIterator
}

func (i *ShipmentsRowIterator) Next() (*ShipmentsRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row ShipmentsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *ShipmentsRowIterator) Do(f func(row *ShipmentsRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row ShipmentsRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type ShipmentsPrimaryKey struct {
	ShipperId  string
	ShipmentId string
}

func (k ShipmentsPrimaryKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
		k.ShipmentId,
	}
}

func (k ShipmentsPrimaryKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k ShipmentsPrimaryKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: spansql.ID("shipment_id"),
			RHS: spansql.StringLiteral(k.ShipmentId),
		},
	}
	return spansql.Paren{Expr: b}
}

func (k ShipmentsPrimaryKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: append(prefix, spansql.ID("shipment_id")),
			RHS: spansql.StringLiteral(k.ShipmentId),
		},
	}
	return spansql.Paren{Expr: b}
}

type ShipmentsPartialKey struct {
	ShipperId       string
	ShipmentId      string
	ValidShipmentId bool
}

func (k ShipmentsPartialKey) SpannerKey() spanner.Key {
	n := 1
	if k.ValidShipmentId {
		n++
	}
	result := make(spanner.Key, 0, n)
	result = append(result, k.ShipperId)
	if k.ValidShipmentId {
		result = append(result, k.ShipmentId)
	}
	return result
}

func (k ShipmentsPartialKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k ShipmentsPartialKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	if k.ValidShipmentId {
		b = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: b,
			RHS: spansql.ComparisonOp{
				Op:  spansql.Eq,
				LHS: spansql.ID("shipment_id"),
				RHS: spansql.StringLiteral(k.ShipmentId),
			},
		}
	}
	return spansql.Paren{Expr: b}
}

func (k ShipmentsPartialKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	if k.ValidShipmentId {
		b = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: b,
			RHS: spansql.ComparisonOp{
				Op:  spansql.Eq,
				LHS: append(prefix, spansql.ID("shipment_id")),
				RHS: spansql.StringLiteral(k.ShipmentId),
			},
		}
	}
	return spansql.Paren{Expr: b}
}

type ShipmentsKeyRange struct {
	Start ShipmentsPartialKey
	End   ShipmentsPartialKey
	Kind  spanner.KeyRangeKind
}

func (k ShipmentsKeyRange) SpannerKeySet() spanner.KeySet {
	return spanner.KeyRange{
		Start: k.Start.SpannerKey(),
		End:   k.End.SpannerKey(),
		Kind:  k.Kind,
	}
}

type ShipmentsRow struct {
	ShipperId            string             `spanner:"shipper_id"`
	ShipmentId           string             `spanner:"shipment_id"`
	CreateTime           time.Time          `spanner:"create_time"`
	UpdateTime           time.Time          `spanner:"update_time"`
	DeleteTime           spanner.NullTime   `spanner:"delete_time"`
	OriginSiteId         spanner.NullString `spanner:"origin_site_id"`
	DestinationSiteId    spanner.NullString `spanner:"destination_site_id"`
	PickupEarliestTime   spanner.NullTime   `spanner:"pickup_earliest_time"`
	PickupLatestTime     spanner.NullTime   `spanner:"pickup_latest_time"`
	DeliveryEarliestTime spanner.NullTime   `spanner:"delivery_earliest_time"`
	DeliveryLatestTime   spanner.NullTime   `spanner:"delivery_latest_time"`
}

func (*ShipmentsRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"shipment_id",
		"create_time",
		"update_time",
		"delete_time",
		"origin_site_id",
		"destination_site_id",
		"pickup_earliest_time",
		"pickup_latest_time",
		"delivery_earliest_time",
		"delivery_latest_time",
	}
}

func (*ShipmentsRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"shipment_id",
		"create_time",
		"update_time",
		"delete_time",
		"origin_site_id",
		"destination_site_id",
		"pickup_earliest_time",
		"pickup_latest_time",
		"delivery_earliest_time",
		"delivery_latest_time",
	}
}

func (*ShipmentsRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("shipment_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("origin_site_id"),
		spansql.ID("destination_site_id"),
		spansql.ID("pickup_earliest_time"),
		spansql.ID("pickup_latest_time"),
		spansql.ID("delivery_earliest_time"),
		spansql.ID("delivery_latest_time"),
	}
}

func (r *ShipmentsRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	if len(r.ShipmentId) > 63 {
		return fmt.Errorf("column shipment_id length > 63")
	}
	if !r.OriginSiteId.IsNull() && len(r.OriginSiteId.StringVal) > 63 {
		return fmt.Errorf("column origin_site_id length > 63")
	}
	if !r.DestinationSiteId.IsNull() && len(r.DestinationSiteId.StringVal) > 63 {
		return fmt.Errorf("column destination_site_id length > 63")
	}
	return nil
}

func (r *ShipmentsRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal shipments row: shipper_id column: %w", err)
			}
		case "shipment_id":
			if err := row.Column(i, &r.ShipmentId); err != nil {
				return fmt.Errorf("unmarshal shipments row: shipment_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delete_time column: %w", err)
			}
		case "origin_site_id":
			if err := row.Column(i, &r.OriginSiteId); err != nil {
				return fmt.Errorf("unmarshal shipments row: origin_site_id column: %w", err)
			}
		case "destination_site_id":
			if err := row.Column(i, &r.DestinationSiteId); err != nil {
				return fmt.Errorf("unmarshal shipments row: destination_site_id column: %w", err)
			}
		case "pickup_earliest_time":
			if err := row.Column(i, &r.PickupEarliestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: pickup_earliest_time column: %w", err)
			}
		case "pickup_latest_time":
			if err := row.Column(i, &r.PickupLatestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: pickup_latest_time column: %w", err)
			}
		case "delivery_earliest_time":
			if err := row.Column(i, &r.DeliveryEarliestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delivery_earliest_time column: %w", err)
			}
		case "delivery_latest_time":
			if err := row.Column(i, &r.DeliveryLatestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delivery_latest_time column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal shipments row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *ShipmentsRow) MutationForColumns(columns []string) (string, []string, []interface{}) {
	var values []interface{}
	return "shipments", columns, values
}

func (r *ShipmentsRow) Mutation() (string, []string, []interface{}) {
	return r.MutationForColumns(r.ColumnNames())
}

func (r *ShipmentsRow) Insert() *spanner.Mutation {
	return spanner.Insert(r.Mutation())
}

func (r *ShipmentsRow) InsertOrUpdate() *spanner.Mutation {
	return spanner.InsertOrUpdate(r.Mutation())
}

func (r *ShipmentsRow) Update() *spanner.Mutation {
	return spanner.Update(r.Mutation())
}

func (r *ShipmentsRow) InsertColumns(columns []string) *spanner.Mutation {
	return spanner.Insert(r.MutationForColumns(columns))
}

func (r *ShipmentsRow) InsertOrUpdateColumns(columns []string) *spanner.Mutation {
	return spanner.InsertOrUpdate(r.MutationForColumns(columns))
}

func (r *ShipmentsRow) UpdateColumns(columns []string) *spanner.Mutation {
	return spanner.Update(r.MutationForColumns(columns))
}

func (r *ShipmentsRow) PrimaryKey() ShipmentsPrimaryKey {
	return ShipmentsPrimaryKey{
		ShipperId:  r.ShipperId,
		ShipmentId: r.ShipmentId,
	}
}

type ShipmentsAndLineItemsReadTransaction struct {
	Tx SpannerReadTransaction
}

func ShipmentsAndLineItems(tx SpannerReadTransaction) ShipmentsAndLineItemsReadTransaction {
	return ShipmentsAndLineItemsReadTransaction{Tx: tx}
}

func (t ShipmentsAndLineItemsReadTransaction) List(
	ctx context.Context,
	query ListQuery,
) *ShipmentsAndLineItemsRowIterator {
	var q strings.Builder
	_, _ = q.WriteString("SELECT ")
	_, _ = q.WriteString("shipper_id, ")
	_, _ = q.WriteString("shipment_id, ")
	_, _ = q.WriteString("create_time, ")
	_, _ = q.WriteString("update_time, ")
	_, _ = q.WriteString("delete_time, ")
	_, _ = q.WriteString("origin_site_id, ")
	_, _ = q.WriteString("destination_site_id, ")
	_, _ = q.WriteString("pickup_earliest_time, ")
	_, _ = q.WriteString("pickup_latest_time, ")
	_, _ = q.WriteString("delivery_earliest_time, ")
	_, _ = q.WriteString("delivery_latest_time, ")
	_, _ = q.WriteString("ARRAY( ")
	_, _ = q.WriteString("SELECT AS STRUCT ")
	_, _ = q.WriteString("shipper_id, ")
	_, _ = q.WriteString("shipment_id, ")
	_, _ = q.WriteString("line_number, ")
	_, _ = q.WriteString("title, ")
	_, _ = q.WriteString("quantity, ")
	_, _ = q.WriteString("weight_kg, ")
	_, _ = q.WriteString("volume_m3, ")
	_, _ = q.WriteString("FROM line_items ")
	_, _ = q.WriteString("WHERE ")
	_, _ = q.WriteString("shipper_id = shipments.shipper_id ")
	_, _ = q.WriteString("AND ")
	_, _ = q.WriteString("shipment_id = shipments.shipment_id ")
	_, _ = q.WriteString(") AS line_items, ")
	_, _ = q.WriteString("FROM shipments ")
	if query.Where != nil {
		_, _ = q.WriteString("WHERE (")
		_, _ = q.WriteString(query.Where.SQL())
		_, _ = q.WriteString(") ")
	}
	if len(query.Order) > 0 {
		_, _ = q.WriteString("ORDER BY ")
		for i, order := range query.Order {
			_, _ = q.WriteString(order.SQL())
			if i < len(query.Order)-1 {
				_, _ = q.WriteString(", ")
			}
		}
	}
	_, _ = q.WriteString("LIMIT @limit ")
	_, _ = q.WriteString("OFFSET @offset ")
	stmt := spanner.Statement{
		SQL: q.String(),
		Params: map[string]interface{}{
			"limit":  query.Limit,
			"offset": query.Offset,
		},
	}
	return &ShipmentsAndLineItemsRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

func (t ShipmentsAndLineItemsReadTransaction) Get(
	ctx context.Context,
	key ShipmentsPrimaryKey,
) (*ShipmentsAndLineItemsRow, error) {
	it := t.List(ctx, ListQuery{
		Where: key.BoolExpr(),
		Limit: 1,
	})
	defer it.Stop()
	row, err := it.Next()
	if err != nil {
		if err == iterator.Done {
			return nil, status.Errorf(codes.NotFound, "not found: %v", key)
		}
		return nil, err
	}
	return row, nil
}

func (t ShipmentsAndLineItemsReadTransaction) BatchGet(
	ctx context.Context,
	keys []ShipmentsPrimaryKey,
) ([]*ShipmentsAndLineItemsRow, error) {
	if len(keys) == 0 {
		return nil, nil
	}
	where := keys[0].BoolExpr()
	for _, key := range keys[1:] {
		where = spansql.LogicalOp{
			Op:  spansql.Or,
			LHS: where,
			RHS: key.BoolExpr(),
		}
	}
	it := t.List(ctx, ListQuery{
		Where: spansql.Paren{Expr: where},
		Limit: int64(len(keys)),
	})
	defer it.Stop()
	foundRows := make(map[ShipmentsPrimaryKey]*ShipmentsAndLineItemsRow, len(keys))
	if err := it.Do(func(row *ShipmentsAndLineItemsRow) error {
		foundRows[row.PrimaryKey()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	rows := make([]*ShipmentsAndLineItemsRow, 0, len(keys))
	for _, key := range keys {
		row, ok := foundRows[key]
		if !ok {
			return nil, status.Errorf(codes.NotFound, "not found: %v", key)
		}
		rows = append(rows, row)
	}
	return rows, nil
}

type ShipmentsAndLineItemsRowIterator struct {
	*spanner.RowIterator
}

func (i *ShipmentsAndLineItemsRowIterator) Next() (*ShipmentsAndLineItemsRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row ShipmentsAndLineItemsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *ShipmentsAndLineItemsRowIterator) Do(f func(row *ShipmentsAndLineItemsRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row ShipmentsAndLineItemsRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type ShipmentsAndLineItemsRow struct {
	ShipperId            string             `spanner:"shipper_id"`
	ShipmentId           string             `spanner:"shipment_id"`
	CreateTime           time.Time          `spanner:"create_time"`
	UpdateTime           time.Time          `spanner:"update_time"`
	DeleteTime           spanner.NullTime   `spanner:"delete_time"`
	OriginSiteId         spanner.NullString `spanner:"origin_site_id"`
	DestinationSiteId    spanner.NullString `spanner:"destination_site_id"`
	PickupEarliestTime   spanner.NullTime   `spanner:"pickup_earliest_time"`
	PickupLatestTime     spanner.NullTime   `spanner:"pickup_latest_time"`
	DeliveryEarliestTime spanner.NullTime   `spanner:"delivery_earliest_time"`
	DeliveryLatestTime   spanner.NullTime   `spanner:"delivery_latest_time"`
	LineItems            []*LineItemsRow    `spanner:"line_items"`
}

func (r *ShipmentsAndLineItemsRow) PrimaryKey() ShipmentsPrimaryKey {
	return ShipmentsPrimaryKey{
		ShipperId:  r.ShipperId,
		ShipmentId: r.ShipmentId,
	}
}

func (r *ShipmentsAndLineItemsRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal shipments row: shipper_id column: %w", err)
			}
		case "shipment_id":
			if err := row.Column(i, &r.ShipmentId); err != nil {
				return fmt.Errorf("unmarshal shipments row: shipment_id column: %w", err)
			}
		case "create_time":
			if err := row.Column(i, &r.CreateTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: create_time column: %w", err)
			}
		case "update_time":
			if err := row.Column(i, &r.UpdateTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: update_time column: %w", err)
			}
		case "delete_time":
			if err := row.Column(i, &r.DeleteTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delete_time column: %w", err)
			}
		case "origin_site_id":
			if err := row.Column(i, &r.OriginSiteId); err != nil {
				return fmt.Errorf("unmarshal shipments row: origin_site_id column: %w", err)
			}
		case "destination_site_id":
			if err := row.Column(i, &r.DestinationSiteId); err != nil {
				return fmt.Errorf("unmarshal shipments row: destination_site_id column: %w", err)
			}
		case "pickup_earliest_time":
			if err := row.Column(i, &r.PickupEarliestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: pickup_earliest_time column: %w", err)
			}
		case "pickup_latest_time":
			if err := row.Column(i, &r.PickupLatestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: pickup_latest_time column: %w", err)
			}
		case "delivery_earliest_time":
			if err := row.Column(i, &r.DeliveryEarliestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delivery_earliest_time column: %w", err)
			}
		case "delivery_latest_time":
			if err := row.Column(i, &r.DeliveryLatestTime); err != nil {
				return fmt.Errorf("unmarshal shipments row: delivery_latest_time column: %w", err)
			}
		case "line_items":
			if err := row.Column(i, &r.LineItems); err != nil {
				return fmt.Errorf("unmarshal shipments interleaved row: line_items column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal shipments row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

type LineItemsReadTransaction struct {
	Tx SpannerReadTransaction
}

func LineItems(tx SpannerReadTransaction) LineItemsReadTransaction {
	return LineItemsReadTransaction{Tx: tx}
}

func (t LineItemsReadTransaction) Read(
	ctx context.Context,
	keySet spanner.KeySet,
) *LineItemsRowIterator {
	return &LineItemsRowIterator{
		RowIterator: t.Tx.Read(
			ctx,
			"line_items",
			keySet,
			((*LineItemsRow)(nil)).ColumnNames(),
		),
	}
}

func (t LineItemsReadTransaction) Get(
	ctx context.Context,
	key LineItemsPrimaryKey,
) (*LineItemsRow, error) {
	spannerRow, err := t.Tx.ReadRow(
		ctx,
		"line_items",
		key.SpannerKey(),
		((*LineItemsRow)(nil)).ColumnNames(),
	)
	if err != nil {
		return nil, err
	}
	var row LineItemsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (t LineItemsReadTransaction) BatchGet(
	ctx context.Context,
	keys []LineItemsPrimaryKey,
) ([]*LineItemsRow, error) {
	spannerKeys := make([]spanner.KeySet, 0, len(keys))
	for _, key := range keys {
		spannerKeys = append(spannerKeys, key.SpannerKey())
	}
	it := t.Read(ctx, spanner.KeySets(spannerKeys...))
	defer it.Stop()
	foundRows := make(map[LineItemsPrimaryKey]*LineItemsRow, len(keys))
	if err := it.Do(func(row *LineItemsRow) error {
		foundRows[row.PrimaryKey()] = row
		return nil
	}); err != nil {
		return nil, err
	}
	rows := make([]*LineItemsRow, 0, len(keys))
	for _, key := range keys {
		row, ok := foundRows[key]
		if !ok {
			return nil, status.Errorf(codes.NotFound, "not found: %v", key)
		}
		rows = append(rows, row)
	}
	return rows, nil
}

func (t LineItemsReadTransaction) List(
	ctx context.Context,
	query ListQuery,
) *LineItemsRowIterator {
	stmt := spanner.Statement{
		SQL: spansql.Query{
			Select: spansql.Select{
				List: ((*LineItemsRow)(nil)).ColumnExprs(),
				From: []spansql.SelectFrom{
					spansql.SelectFromTable{Table: "line_items"},
				},
				Where: query.Where,
			},
			Order:  query.Order,
			Limit:  spansql.Param("limit"),
			Offset: spansql.Param("offset"),
		}.SQL(),
		Params: map[string]interface{}{
			"limit":  query.Limit,
			"offset": query.Offset,
		},
	}
	return &LineItemsRowIterator{
		RowIterator: t.Tx.Query(ctx, stmt),
	}
}

type LineItemsRowIterator struct {
	*spanner.RowIterator
}

func (i *LineItemsRowIterator) Next() (*LineItemsRow, error) {
	spannerRow, err := i.RowIterator.Next()
	if err != nil {
		return nil, err
	}
	var row LineItemsRow
	if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
		return nil, err
	}
	return &row, nil
}

func (i *LineItemsRowIterator) Do(f func(row *LineItemsRow) error) error {
	return i.RowIterator.Do(func(spannerRow *spanner.Row) error {
		var row LineItemsRow
		if err := row.UnmarshalSpannerRow(spannerRow); err != nil {
			return err
		}
		return f(&row)
	})
}

type LineItemsPrimaryKey struct {
	ShipperId  string
	ShipmentId string
	LineNumber int64
}

func (k LineItemsPrimaryKey) SpannerKey() spanner.Key {
	return spanner.Key{
		k.ShipperId,
		k.ShipmentId,
		k.LineNumber,
	}
}

func (k LineItemsPrimaryKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k LineItemsPrimaryKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: spansql.ID("shipment_id"),
			RHS: spansql.StringLiteral(k.ShipmentId),
		},
	}
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: spansql.ID("line_number"),
			RHS: spansql.IntegerLiteral(k.LineNumber),
		},
	}
	return spansql.Paren{Expr: b}
}

func (k LineItemsPrimaryKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: append(prefix, spansql.ID("shipment_id")),
			RHS: spansql.StringLiteral(k.ShipmentId),
		},
	}
	b = spansql.LogicalOp{
		Op:  spansql.And,
		LHS: b,
		RHS: spansql.ComparisonOp{
			Op:  spansql.Eq,
			LHS: append(prefix, spansql.ID("line_number")),
			RHS: spansql.IntegerLiteral(k.LineNumber),
		},
	}
	return spansql.Paren{Expr: b}
}

type LineItemsPartialKey struct {
	ShipperId       string
	ShipmentId      string
	ValidShipmentId bool
	LineNumber      int64
	ValidLineNumber bool
}

func (k LineItemsPartialKey) SpannerKey() spanner.Key {
	n := 1
	if k.ValidShipmentId {
		n++
		if k.ValidLineNumber {
			n++
		}
	}
	result := make(spanner.Key, 0, n)
	result = append(result, k.ShipperId)
	if k.ValidShipmentId {
		result = append(result, k.ShipmentId)
		if k.ValidLineNumber {
			result = append(result, k.LineNumber)
		}
	}
	return result
}

func (k LineItemsPartialKey) SpannerKeySet() spanner.KeySet {
	return k.SpannerKey()
}

func (k LineItemsPartialKey) BoolExpr() spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: spansql.ID("shipper_id"),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	if k.ValidShipmentId {
		b = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: b,
			RHS: spansql.ComparisonOp{
				Op:  spansql.Eq,
				LHS: spansql.ID("shipment_id"),
				RHS: spansql.StringLiteral(k.ShipmentId),
			},
		}
		if k.ValidLineNumber {
			b = spansql.LogicalOp{
				Op:  spansql.And,
				LHS: b,
				RHS: spansql.ComparisonOp{
					Op:  spansql.Eq,
					LHS: spansql.ID("line_number"),
					RHS: spansql.IntegerLiteral(k.LineNumber),
				},
			}
		}
	}
	return spansql.Paren{Expr: b}
}

func (k LineItemsPartialKey) QualifiedBoolExpr(prefix spansql.PathExp) spansql.BoolExpr {
	b := spansql.BoolExpr(spansql.ComparisonOp{
		Op:  spansql.Eq,
		LHS: append(prefix, spansql.ID("shipper_id")),
		RHS: spansql.StringLiteral(k.ShipperId),
	})
	if k.ValidShipmentId {
		b = spansql.LogicalOp{
			Op:  spansql.And,
			LHS: b,
			RHS: spansql.ComparisonOp{
				Op:  spansql.Eq,
				LHS: append(prefix, spansql.ID("shipment_id")),
				RHS: spansql.StringLiteral(k.ShipmentId),
			},
		}
		if k.ValidLineNumber {
			b = spansql.LogicalOp{
				Op:  spansql.And,
				LHS: b,
				RHS: spansql.ComparisonOp{
					Op:  spansql.Eq,
					LHS: append(prefix, spansql.ID("line_number")),
					RHS: spansql.IntegerLiteral(k.LineNumber),
				},
			}
		}
	}
	return spansql.Paren{Expr: b}
}

type LineItemsKeyRange struct {
	Start LineItemsPartialKey
	End   LineItemsPartialKey
	Kind  spanner.KeyRangeKind
}

func (k LineItemsKeyRange) SpannerKeySet() spanner.KeySet {
	return spanner.KeyRange{
		Start: k.Start.SpannerKey(),
		End:   k.End.SpannerKey(),
		Kind:  k.Kind,
	}
}

type LineItemsRow struct {
	ShipperId  string              `spanner:"shipper_id"`
	ShipmentId string              `spanner:"shipment_id"`
	LineNumber int64               `spanner:"line_number"`
	Title      spanner.NullString  `spanner:"title"`
	Quantity   spanner.NullFloat64 `spanner:"quantity"`
	WeightKg   spanner.NullFloat64 `spanner:"weight_kg"`
	VolumeM3   spanner.NullFloat64 `spanner:"volume_m3"`
}

func (*LineItemsRow) ColumnNames() []string {
	return []string{
		"shipper_id",
		"shipment_id",
		"line_number",
		"title",
		"quantity",
		"weight_kg",
		"volume_m3",
	}
}

func (*LineItemsRow) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"shipment_id",
		"line_number",
		"title",
		"quantity",
		"weight_kg",
		"volume_m3",
	}
}

func (*LineItemsRow) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("shipment_id"),
		spansql.ID("line_number"),
		spansql.ID("title"),
		spansql.ID("quantity"),
		spansql.ID("weight_kg"),
		spansql.ID("volume_m3"),
	}
}

func (r *LineItemsRow) Validate() error {
	if len(r.ShipperId) > 63 {
		return fmt.Errorf("column shipper_id length > 63")
	}
	if len(r.ShipmentId) > 63 {
		return fmt.Errorf("column shipment_id length > 63")
	}
	if !r.Title.IsNull() && len(r.Title.StringVal) > 63 {
		return fmt.Errorf("column title length > 63")
	}
	return nil
}

func (r *LineItemsRow) UnmarshalSpannerRow(row *spanner.Row) error {
	for i := 0; i < row.Size(); i++ {
		switch row.ColumnName(i) {
		case "shipper_id":
			if err := row.Column(i, &r.ShipperId); err != nil {
				return fmt.Errorf("unmarshal line_items row: shipper_id column: %w", err)
			}
		case "shipment_id":
			if err := row.Column(i, &r.ShipmentId); err != nil {
				return fmt.Errorf("unmarshal line_items row: shipment_id column: %w", err)
			}
		case "line_number":
			if err := row.Column(i, &r.LineNumber); err != nil {
				return fmt.Errorf("unmarshal line_items row: line_number column: %w", err)
			}
		case "title":
			if err := row.Column(i, &r.Title); err != nil {
				return fmt.Errorf("unmarshal line_items row: title column: %w", err)
			}
		case "quantity":
			if err := row.Column(i, &r.Quantity); err != nil {
				return fmt.Errorf("unmarshal line_items row: quantity column: %w", err)
			}
		case "weight_kg":
			if err := row.Column(i, &r.WeightKg); err != nil {
				return fmt.Errorf("unmarshal line_items row: weight_kg column: %w", err)
			}
		case "volume_m3":
			if err := row.Column(i, &r.VolumeM3); err != nil {
				return fmt.Errorf("unmarshal line_items row: volume_m3 column: %w", err)
			}
		default:
			return fmt.Errorf("unmarshal line_items row: unhandled column: %s", row.ColumnName(i))
		}
	}
	return nil
}

func (r *LineItemsRow) MutationForColumns(columns []string) (string, []string, []interface{}) {
	var values []interface{}
	return "line_items", columns, values
}

func (r *LineItemsRow) Mutation() (string, []string, []interface{}) {
	return r.MutationForColumns(r.ColumnNames())
}

func (r *LineItemsRow) Insert() *spanner.Mutation {
	return spanner.Insert(r.Mutation())
}

func (r *LineItemsRow) InsertOrUpdate() *spanner.Mutation {
	return spanner.InsertOrUpdate(r.Mutation())
}

func (r *LineItemsRow) Update() *spanner.Mutation {
	return spanner.Update(r.Mutation())
}

func (r *LineItemsRow) InsertColumns(columns []string) *spanner.Mutation {
	return spanner.Insert(r.MutationForColumns(columns))
}

func (r *LineItemsRow) InsertOrUpdateColumns(columns []string) *spanner.Mutation {
	return spanner.InsertOrUpdate(r.MutationForColumns(columns))
}

func (r *LineItemsRow) UpdateColumns(columns []string) *spanner.Mutation {
	return spanner.Update(r.MutationForColumns(columns))
}

func (r *LineItemsRow) PrimaryKey() LineItemsPrimaryKey {
	return LineItemsPrimaryKey{
		ShipperId:  r.ShipperId,
		ShipmentId: r.ShipmentId,
		LineNumber: r.LineNumber,
	}
}

type ListQuery struct {
	Where  spansql.BoolExpr
	Order  []spansql.Order
	Limit  int64
	Offset int64
}

type SpannerReadTransaction interface {
	Read(ctx context.Context, table string, keys spanner.KeySet, columns []string) *spanner.RowIterator
	ReadRow(ctx context.Context, table string, key spanner.Key, columns []string) (*spanner.Row, error)
	Query(ctx context.Context, statement spanner.Statement) *spanner.RowIterator
}
